[gd_scene load_steps=23 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://Scripts/GameObjects/rock.gd" type="Script" id=2]
[ext_resource path="res://Graphics/GameObjects/rock.jpg" type="Texture" id=3]
[ext_resource path="res://Graphics/Shaders/shadow_gradient.tres" type="Texture" id=4]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "GradientTexture"

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorCompose" id=3]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShader" id=6]
code = "shader_type spatial;
uniform sampler2D GradientTexture;



void vertex() {
// Output:0

}

void fragment() {
// VectorDecompose:8
	vec3 n_in8p0 = vec3(0.00000,0.00000,0.00000);
	float n_out8p0;
	float n_out8p1;
	float n_out8p2;
	n_out8p0 = n_in8p0.x;
	n_out8p1 = n_in8p0.y;
	n_out8p2 = n_in8p0.z;

// VectorCompose:6
	float n_in6p1 = 0.00000;
	float n_in6p2 = 1.00000;
	vec3 n_out6p0;
	n_out6p0 = vec3( n_out8p1 , n_in6p1 , n_in6p2 );

// TextureUniform:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 n_tex_read = texture( GradientTexture , n_out6p0.xy );
		n_out4p0 = n_tex_read.rgb;
		n_out4p1 = n_tex_read.a;
	}

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 449, 448 )
nodes/fragment/0/position = Vector2( 1080, 440 )
nodes/fragment/4/node = SubResource( 1 )
nodes/fragment/4/position = Vector2( 520, 600 )
nodes/fragment/5/node = SubResource( 2 )
nodes/fragment/5/position = Vector2( 40, 760 )
nodes/fragment/6/node = SubResource( 3 )
nodes/fragment/6/position = Vector2( 320, 780 )
nodes/fragment/7/node = SubResource( 4 )
nodes/fragment/7/position = Vector2( 100, 660 )
nodes/fragment/8/node = SubResource( 5 )
nodes/fragment/8/position = Vector2( 260, 660 )
nodes/fragment/connections = PoolIntArray( 6, 0, 4, 0, 8, 1, 6, 0, 4, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/GradientTexture = ExtResource( 1 )

[sub_resource type="PhysicsMaterial" id=8]
friction = 0.85
rough = true

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeColorOp" id=10]
operator = 8

[sub_resource type="VisualShaderNodeTexture" id=11]
output_port_for_preview = 0
texture = ExtResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=12]
output_port_for_preview = 0
source = 2

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=14]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorLen" id=15]

[sub_resource type="VisualShaderNodeVectorCompose" id=16]

[sub_resource type="VisualShader" id=17]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2;


void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0;
	n_out4p0 = vec3(UV,0.0);

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture( TEXTURE , n_out4p0.xy );
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// VectorOp:6
	vec3 n_in6p1 = vec3(1.00000,1.00000,1.00000);
	vec3 n_out6p0;
	n_out6p0 = n_out4p0 * n_in6p1;

// VectorOp:11
	vec3 n_in11p1 = vec3(0.50000,0.50000,0.00000);
	vec3 n_out11p0;
	n_out11p0 = n_out6p0 - n_in11p1;

// VectorLen:8
	float n_out8p0;
	n_out8p0 = length( n_out11p0 );

// VectorCompose:9
	float n_in9p2 = 0.00000;
	vec3 n_out9p0;
	n_out9p0 = vec3( n_out8p0 , n_out8p0 , n_in9p2 );

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	vec4 tex_frg_2_read = texture( tex_frg_2 , n_out9p0.xy );
	n_out2p0 = tex_frg_2_read.rgb;
	n_out2p1 = tex_frg_2_read.a;

// ColorOp:12
	vec3 n_out12p0;
	{
		float base=n_out3p0.x;
		float blend=n_out2p0.x;
		if (base < 0.5) {
			n_out12p0.x = (base * (2.0*blend));
		} else {
			n_out12p0.x = (1.0 - (1.0-base) * (1.0-2.0*(blend-0.5)));
		}
	}
	{
		float base=n_out3p0.y;
		float blend=n_out2p0.y;
		if (base < 0.5) {
			n_out12p0.y = (base * (2.0*blend));
		} else {
			n_out12p0.y = (1.0 - (1.0-base) * (1.0-2.0*(blend-0.5)));
		}
	}
	{
		float base=n_out3p0.z;
		float blend=n_out2p0.z;
		if (base < 0.5) {
			n_out12p0.z = (base * (2.0*blend));
		} else {
			n_out12p0.z = (1.0 - (1.0-base) * (1.0-2.0*(blend-0.5)));
		}
	}

// Output:0
	COLOR.rgb = n_out12p0;
	COLOR.a = n_out3p1;
	NORMAL = n_out3p0;
	NORMALMAP = n_out3p0;
	NORMALMAP_DEPTH = dot(n_out3p0,vec3(0.333333,0.333333,0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -624.544, 12.1 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 940, 220 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( 540, -40 )
nodes/fragment/3/node = SubResource( 12 )
nodes/fragment/3/position = Vector2( -180, 180 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( -440, -20 )
nodes/fragment/6/node = SubResource( 14 )
nodes/fragment/6/position = Vector2( -200, 20 )
nodes/fragment/8/node = SubResource( 15 )
nodes/fragment/8/position = Vector2( 180, 20 )
nodes/fragment/9/node = SubResource( 16 )
nodes/fragment/9/position = Vector2( 340, 20 )
nodes/fragment/11/node = SubResource( 9 )
nodes/fragment/11/position = Vector2( 0, 20 )
nodes/fragment/12/node = SubResource( 10 )
nodes/fragment/12/position = Vector2( 760, 60 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 0, 4, 0, 6, 0, 8, 0, 9, 0, 9, 0, 2, 0, 8, 0, 9, 1, 11, 0, 8, 0, 3, 0, 0, 4, 12, 0, 0, 0, 3, 0, 0, 3, 3, 0, 0, 2, 3, 1, 0, 1, 3, 0, 12, 0, 2, 0, 12, 1, 6, 0, 11, 0 )

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 17 )

[node name="RigidBody2D" type="RigidBody2D"]
material = SubResource( 7 )
physics_material_override = SubResource( 8 )
script = ExtResource( 2 )
texture = ExtResource( 3 )
roughness = 0.116
details = 10.76
size = 10.0

[node name="Collision" type="CollisionPolygon2D" parent="."]
polygon = PoolVector2Array( 9.15215, 1.69244, 8.88015, 3.4492, 8.35431, 5.18164, 7.34235, 6.69687, 5.7479, 7.62427, 4.39147, 8.86549, 2.59844, 9.1292, 0.866505, 9.34052, -0.904001, 9.60979, -2.65347, 9.32046, -4.15554, 8.31276, -5.74497, 7.55704, -6.65802, 5.99762, -8.44525, 5.1561, -9.34078, 3.53403, -9.36499, 1.69252, -9.96978, -0.0363498, -8.77481, -1.66897, -8.87969, -3.46041, -7.85142, -4.85873, -6.87143, -6.25859, -5.37369, -7.11602, -3.94898, -7.9426, -2.70973, -9.49758, -0.819931, -8.87802, 0.853813, -9.08064, 2.52481, -8.78245, 4.32421, -8.58178, 5.56213, -7.27088, 7.28537, -6.55183, 8.13621, -4.96253, 8.85004, -3.37001, 9.11522, -1.66655, 9.81696, 0.0597566 )

[node name="SpritePoly" type="Polygon2D" parent="."]
material = SubResource( 18 )
antialiased = true
texture = ExtResource( 3 )
polygon = PoolVector2Array( 9.15215, 1.69244, 8.88015, 3.4492, 8.35431, 5.18164, 7.34235, 6.69687, 5.7479, 7.62427, 4.39147, 8.86549, 2.59844, 9.1292, 0.866505, 9.34052, -0.904001, 9.60979, -2.65347, 9.32046, -4.15554, 8.31276, -5.74497, 7.55704, -6.65802, 5.99762, -8.44525, 5.1561, -9.34078, 3.53403, -9.36499, 1.69252, -9.96978, -0.0363498, -8.77481, -1.66897, -8.87969, -3.46041, -7.85142, -4.85873, -6.87143, -6.25859, -5.37369, -7.11602, -3.94898, -7.9426, -2.70973, -9.49758, -0.819931, -8.87802, 0.853813, -9.08064, 2.52481, -8.78245, 4.32421, -8.58178, 5.56213, -7.27088, 7.28537, -6.55183, 8.13621, -4.96253, 8.85004, -3.37001, 9.11522, -1.66655, 9.81696, 0.0597566 )
uv = PoolVector2Array( 1586.66, 630.511, 1545.72, 726.661, 1479.85, 814.7, 1391.07, 893.017, 1281.59, 959.502, 1155.1, 1011.56, 1019.01, 1046.62, 873.897, 1064.72, 725.074, 1064.66, 580.95, 1046.61, 442.287, 1010.7, 315.847, 958.209, 205.605, 890.57, 117.199, 811.502, 51.7625, 722.286, 12.7535, 628.381, 0.00534058, 531.555, 14.0893, 433.815, 54.6005, 339.785, 119.723, 252.76, 208.555, 174.257, 317.897, 107.756, 443.841, 55.7873, 580.513, 20.4718, 726.429, 2.26079, 874.89, 2.34277, 1021.03, 20.7672, 1159.99, 57.0654, 1286.07, 109.767, 1394.84, 176.758, 1482.98, 255.698, 1547.63, 343.647, 1586.96, 437.55, 1599.99, 536.747 )
